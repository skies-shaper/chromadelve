-if it's a mobile device, tell them the game won't work, but maybe like give some screenshots and encourage them to get it from ein computer

-Make a room editor
-Make a tileset for each element


TO DO:
Add enemies
Add basic enemy AI
Essentially, a lil fighty dungeon crawler (infinite I suppose) - randomized end goals, just rack up a score. THEN, (since combat sytem will be worked out), do the chroma bit :)

For descs, see libreoffice

Gameplay turn loop: 

-Move
-Attack    
-Enemies attack
-Enemies move


Multiplayer (LAN):
One person runs a node app which hosts the game on a given port.
This provides a lil console setup for them (to restart a game, etc)
Everyone else goes to the provided link (if using a web browser)
The node app will serve the multiplayer HTML file.
The multiplayer file will mostly act to render the player's screen. The player whose turn it is will be served a list of options for what they can do (move, make various attacks). The option they choose will be transmitted to the multiplayer server, which will validate it and then send a new game state to everyone.

Add settings:
\_ manage saves
    \_ rename (?) games

Game saves:
\_ give most recent version saved in and other metadata, just in case

MAKE MORE TILES AND ENTITY ART !!!! !!! !! !!!!

Finish Popup logic

\_ 'spawn eggs' - tiles where monsters are guaranteed to spawn

\_ add support for background animations (like waves, clouds ETC)
\_ improve the room generation algorithm 
    ✅ room metadata: which walls have doors, have doors have positions in the room's design? - have corridors use the closest of those, for each wall. 
        ✅ meta tiles: DOOR_LEFT, DOOR_RIGHT, DOOR_UP, DOOR_DOWN - that is where the link occurs.
        new room obj: 
        {
            data: [][]
            width: #
            height: #
            doors: {
                up : []
                down: []
                left: []
                right: []
            }
        }
✅--> 1) place out where rooms will be
✅--> 2) determine which of the template rooms could fit based on the door combo - the doors list only shows potential doors, so all sides with potential doors do not need to be filled.
✅--> 3) add that room to the thing, add that room's door positions to a list
--> 4) for each room, connect its door positions with the next room's door positions



